import java.util.HashMap; import java.util.Arrays; import java.lang.Math;
public class NoTimeForATaxicabPart2 {	
	public static void main(String[] arguments){
		int[] position = new int[2]; HashMap<String, Integer> visitedPositions = new HashMap<String, Integer>(); int steps; double degrees = 0;
		for(int move = 0; move < arguments.length; move++){
			steps = Integer.parseInt(arguments[move].substring(1).replaceAll(",", "")); //removes commas from input
			degrees += (arguments[move].charAt(0)=='L')? (Math.PI/2) : -(Math.PI/2); //orientation changes if move is left or right
			for (int step = 1; step <= steps; step++){
				for(int i = 0; i < position.length; i++){ position[i] += Math.round(Math.cos(degrees - (Math.PI/2 * i))); } // position updated, steps * 0 = 0 is added if no movement occurs in that direction, and steps * 1/-1 added depending on orientation
				visitedPositions.put(Arrays.toString(position), (visitedPositions.get(Arrays.toString(position)) == null ) ? 0 : (visitedPositions.get(Arrays.toString(position))) + 1); //initializes hash map, adding markers representing additional times visited per coordinate key
				if(visitedPositions.get(Arrays.toString(position)).equals(1)){ System.out.println("Easter Bunny HQ is " + (Math.abs(position[0]) + Math.abs(position[1])) + " blocks away!"); } //displacement to locations visited exactly twice
				//bug: should stop searching after 1st "intersection"
			}
		}
	}
}
